from aiogram import types, Dispatcher
from aiogram.dispatcher.filters import Command
from utils.watermark import WatermarkProcessor
from config import BOT, WATERMARK
import os
import logging
from typing import Union
import asyncio
import aiohttp
import math

class MediaHandler:
    def __init__(self):
        self.processor = WatermarkProcessor()
        
    async def download_file(self, file: types.File, destination: str, message: types.Message) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
            file_url = await file.get_url()
            
            async with aiohttp.ClientSession() as session:
                async with session.get(file_url) as response:
                    total_size = int(response.headers.get('content-length', 0))
                    
                    if total_size == 0:
                        await message.reply("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞")
                        return False
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    progress_message = await message.reply("–ó–∞–≥—Ä—É–∑–∫–∞: 0%")
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏
                    with open(destination, 'wb') as f:
                        downloaded = 0
                        last_percentage = 0
                        
                        async for chunk in response.content.iter_chunked(BOT.CHUNK_SIZE):
                            f.write(chunk)
                            downloaded += len(chunk)
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5%
                            percentage = int((downloaded / total_size) * 100)
                            if percentage - last_percentage >= 5:
                                await progress_message.edit_text(f"–ó–∞–≥—Ä—É–∑–∫–∞: {percentage}%")
                                last_percentage = percentage
                    
                    await progress_message.delete()
                    return True
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return False

    async def process_media(self, message: types.Message, media_type: str) -> Union[tuple[str, str], tuple[None, None]]:
        """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤"""
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º file_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
            if media_type == "photo":
                file_id = message.photo[-1].file_id
            elif media_type == "video":
                file_id = message.video.file_id
            elif media_type == "video_note":
                file_id = message.video_note.file_id
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: {media_type}")

            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—É—Ç–µ–π
            input_path = os.path.join(BOT.DOWNLOAD_PATH, f"{file_id}")
            output_path = os.path.join(BOT.DOWNLOAD_PATH, f"watermarked_{file_id}")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            ext = ".jpg" if media_type == "photo" else ".mp4"
            input_path += ext
            output_path += ext

            return input_path, output_path

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {media_type}: {str(e)}")
            await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
            return None, None

    async def handle_photo(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ"""
        processing_msg = await message.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ç–æ...")
        
        try:
            input_path, output_path = await self.process_media(message, "photo")
            if not input_path:
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ
            file = await message.photo[-1].get_file()
            if not await self.download_file(file, input_path, message):
                return

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            self.processor.process_image(input_path, output_path)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ
            await message.reply_photo(
                photo=open(output_path, 'rb'),
                caption="–§–æ—Ç–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º"
            )

        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        finally:
            await processing_msg.delete()
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in [input_path, output_path]:
                if os.path.exists(path):
                    os.remove(path)

    async def handle_video(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ"""
        processing_msg = await message.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...")
        
        try:
            input_path, output_path = await self.process_media(message, "video")
            if not input_path:
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            file = await message.video.get_file()
            if not await self.download_file(file, input_path, message):
                return

            await message.reply("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–æ–±–∞–≤–ª—è—é –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫...")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            self.processor.process_video(input_path, output_path)

            await message.reply("–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            await message.reply_video(
                video=open(output_path, 'rb'),
                caption="–í–∏–¥–µ–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º"
            )

        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: {str(e)}")
        finally:
            await processing_msg.delete()
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in [input_path, output_path]:
                if os.path.exists(path):
                    os.remove(path)

    async def handle_video_note(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–æ–≤"""
        processing_msg = await message.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞...")
        
        try:
            input_path, output_path = await self.process_media(message, "video_note")
            if not input_path:
                return

            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
            file = await message.video_note.get_file()
            if not await self.download_file(file, input_path, message):
                return

            await message.reply("–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω, –¥–æ–±–∞–≤–ª—è—é –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫...")

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
            self.processor.process_video(input_path, output_path, is_video_note=True)

            await message.reply("–í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–æ–±–∞–≤–ª–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ...")

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞
            with open(output_path, 'rb') as video:
                await message.reply_video_note(
                    video_note=video
                )

        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∞: {str(e)}")
        finally:
            await processing_msg.delete()
            # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for path in [input_path, output_path]:
                if os.path.exists(path):
                    os.remove(path)

    async def cmd_start(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await message.reply(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã.\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/help - –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n\n"
            "‚ú® –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤ –Ω–∞ —Ñ–æ—Ç–æ\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å –ø–ª–∞–≤–∞—é—â–∏–º –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–∫–æ–≤\n"
            "‚Ä¢ –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ –ª—é–±–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n\n"
            "üöÄ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π –º–µ–¥–∏–∞—Ñ–∞–π–ª!\n\n"
            "üîó –ë–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è @freaksredana\n"
            "üë®‚Äçüíª –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @Anonimus090"
        )

    async def cmd_help(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        await message.reply(
            "üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≤ —á–∞—Ç\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏ –≤–µ—Ä–Ω—ë—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n\n"
            "2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤ —á–∞—Ç\n"
            "‚Ä¢ –ë–æ—Ç –¥–æ–±–∞–≤–∏—Ç –ø–ª–∞–≤–∞—é—â–∏–π –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫\n"
            "‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏ –∑–≤—É–∫ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è\n\n"
            "3Ô∏è‚É£ –í–∏–¥–µ–æ-–∫—Ä—É–∂–∫–∏:\n"
            "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫\n"
            "‚Ä¢ –ë–æ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–≥–æ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞\n\n"
            "‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
            "‚ùóÔ∏è –í–∞–∂–Ω–æ:\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG, MP4, MOV\n"
            "‚Ä¢ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–æ–≤ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n"
            "‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è\n\n"
            "ü§ù –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @Anonimus090"
        )

    async def cmd_settings(self, message: types.Message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞"""
        settings = (
            "‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞:\n\n"
            f"üìù –¢–µ–∫—Å—Ç –≤–æ–¥—è–Ω–æ–≥–æ –∑–Ω–∞–∫–∞: {WATERMARK.TEXT}\n"
            f"üìè –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {WATERMARK.SIZE}\n"
            f"üîç –ü—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å: {int(WATERMARK.OPACITY * 100)}%\n"
            f"üìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ —Ñ–æ—Ç–æ: {WATERMARK.POSITION}\n\n"
            "üé• –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–∏–¥–µ–æ:\n"
            f"üìä –ê–º–ø–ª–∏—Ç—É–¥–∞ –¥–≤–∏–∂–µ–Ω–∏—è: {WATERMARK.AMPLITUDE}\n"
            f"‚ö°Ô∏è –ß–∞—Å—Ç–æ—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è: {WATERMARK.FREQUENCY}\n\n"
            "üé® –°–µ—Ç–∫–∞ –≤–æ–¥—è–Ω—ã—Ö –∑–Ω–∞–∫–æ–≤:\n"
            f"‚ÜîÔ∏è –ö–æ–ª–æ–Ω–æ–∫: {WATERMARK.GRID_COLS}\n"
            f"‚ÜïÔ∏è –°—Ç—Ä–æ–∫: {WATERMARK.GRID_ROWS}"
        )
        await message.reply(settings)

def register_handlers(dp: Dispatcher):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    handler = MediaHandler()
    
    # –ö–æ–º–∞–Ω–¥—ã
    dp.register_message_handler(handler.cmd_start, Command("start"))
    dp.register_message_handler(handler.cmd_help, Command("help"))
    
    # –ú–µ–¥–∏–∞—Ñ–∞–π–ª—ã
    dp.register_message_handler(handler.handle_photo, content_types=[types.ContentType.PHOTO])
    dp.register_message_handler(handler.handle_video, content_types=[types.ContentType.VIDEO])
    dp.register_message_handler(handler.handle_video_note, content_types=[types.ContentType.VIDEO_NOTE]) 